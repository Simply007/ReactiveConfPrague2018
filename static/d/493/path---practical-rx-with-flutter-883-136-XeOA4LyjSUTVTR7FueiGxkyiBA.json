{"data":{"site":{"siteMetadata":{"title":"ReactiveConf Prague 2018","author":"Ondřej Chrastina"}},"markdownRemark":{"id":"7e80eaaa-22cf-57ba-8ce0-7894e36c14e4","excerpt":"Authors:  BRIAN EGAN FILIP HRACEK reactive vs proactive approach proactive - listening on stream of events and get the data and display…","html":"<p>Authors: </p>\n<ul>\n<li>\n<p>BRIAN EGAN</p>\n</li>\n<li>\n<p>FILIP HRACEK</p>\n</li>\n<li>\n<p>reactive vs proactive approach</p>\n<ul>\n<li>proactive - listening on stream of events and get the data and display results (just by the functional transformation)</li>\n</ul>\n</li>\n</ul>\n<h1>Use case - search screen with listing app implemented ba Flutter</h1>\n<ul>\n<li>\n<p><a href=\"https://flutter.io/\">Flutter</a></p>\n<ul>\n<li>Reactive framework to build app</li>\n</ul>\n</li>\n<li>Using stream design pattern for filtering the list of data in listing by the search string</li>\n<li>\n<p>reactive </p>\n<ul>\n<li>problem - with race condition - return from search for short patter would take longer than longer prefix (app - longer vs apple - shorter) -> search would return more accurate result and the the search for less specific pattern is returned and return more vague results</li>\n<li>\n<p>solution - use RX* for flutter</p>\n<ol>\n<li>wait for all promises to be finished (asyncmap)</li>\n<li>- search last the longest search :/</li>\n<li>use <code class=\"language-text\">switchmap</code> </li>\n<li>use dbounce - same as example for SDK RX for .NET</li>\n<li>use combiner for in-memory merging</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Recap</h2>\n<ul>\n<li>\n<p>async => out of order </p>\n<ul>\n<li>use switchMap to solve from functional input to functional output</li>\n</ul>\n</li>\n</ul>\n<h1>Use case</h1>\n<ul>\n<li>\n<p>infinite scrolling - how to solve when to load another data</p>\n<ul>\n<li>exhaustMap</li>\n</ul>\n</li>\n</ul>\n<h1>Other map</h1>\n<p>There are al lot of types specialized for the specific scenario</p>\n<h1>Combining streams</h1>\n<ul>\n<li>Like Spotify Radio and thumbs up and thumbs down button when listening and listing future music</li>\n</ul>\n<h1>Concatenation of streams</h1>\n<ul>\n<li>concat / concatEager</li>\n<li>searching for data by first and the second word and combination of these words</li>\n</ul>\n<h1>Wrap-up</h1>\n<ul>\n<li>RX is created to combine many strategies, how to combine, filer and process data for specific use cases.</li>\n</ul>\n<h1>Examples</h1>\n<ul>\n<li>\n<p>RxDart Repo</p>\n<ul>\n<li><a href=\"https://github.com/ReactiveX/rxdart/tree/master/example/flutter/github_search\">https://github.com/ReactiveX/rxdart/tree/master/example/flutter/github_search</a></li>\n</ul>\n</li>\n<li>\n<p>Flutter Architecture Samples</p>\n<ul>\n<li><a href=\"https://github.com/brianegan/flutter_architecture_samples\">https://github.com/brianegan/flutter<em>architecture</em>samples</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Practical Rx with Flutter","date":"October 29, 2018"}}},"pageContext":{"slug":"/Practical Rx with Flutter/","previous":{"fields":{"slug":"/End-to-end testing is hard - but it doesn't have to be/"},"frontmatter":{"title":"End-to-end testing is hard - but it doesn't have to be"}},"next":{"fields":{"slug":"/Lessons from using bleeding edge tech in a startup/"},"frontmatter":{"title":"Lessons from using bleeding edge tech in a startup"}}}}